# -*- coding: utf-8 -*-
"""LSTM_Stock Prediction_2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JnvnK1ZpQE-LjYKA46r5FxUI5BWOoV4P
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from keras.models import Sequential
from keras.layers import LSTM, Dropout, Dense, Activation
import os as os

import datetime

df_price = pd.read_csv(('/content/drive/MyDrive/Colab Notebooks/01-삼성전자-주가.csv'), encoding='utf8')
df_price.describe()

pd.to_datetime(df_price['일자'], format='%Y%m%d')
print(df_price)

df_price['일자'] = pd.to_datetime(df_price['일자'], format = '%Y%m%d')
df_price['연도'] = df_price['일자'].dt.year
df_price['월'] = df_price['일자'].dt.month
df_price['일'] = df_price['일자'].dt.day

from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()
scale_cols = ['시가', '고가', '저가', '종가', '거래량']
df_scaled = scaler.fit_transform(df_price[scale_cols])

df_scaled = pd.DataFrame(df_scaled)
df_scaled.columns = scale_cols

print(df_scaled)

TEST_SIZE = 200
window_size = 20

train = df_scaled[:-TEST_SIZE]
test = df_scaled[-TEST_SIZE:]

print(len(train))

def make_dataset(data, label, window_size):

  feature_list = []
  label_list = []
  for i in range(len(data)-window_size):
    feature_list.append(np.array(data.iloc[i:i+window_size]))
    label_list.append(np.array(label.iloc[i+window_size]))
  return np.array(feature_list), np.array(label_list)

feature_cols = ['시가', '고가', '저가', '거래량']
label_cols = ['종가']

train_feature = train[feature_cols]
train_label = train[label_cols]
test_feature = test[feature_cols]
test_label = test[label_cols]

#print(train_feature[0:20])
train_feature, train_label = make_dataset(train_feature, train_label, 20)
#print(train_label.shape)

from sklearn.model_selection import train_test_split
x_train, x_valid, y_train, y_valid = train_test_split(train_feature, train_label, test_size = 0.2)

x_train.shape, x_valid.shape

x_test, y_test = make_dataset(test_feature, test_label, 20)
x_test.shape, y_test.shape

from keras.models import Sequential
from keras.layers import Dense
from keras.callbacks import EarlyStopping, ModelCheckpoint
from keras.layers import LSTM

model = Sequential()
model.add(LSTM(3,
               input_dim = 4, 
               input_length = 20,

               #input_shape = (train_feature.shape[1], train_feature.shape[2]),
               activation = 'relu',
               return_sequences = False)
  )
model.add(Dense(1))

print(train_feature.shape[2])

model.compile(loss = 'mean_squared_error', optimizer = 'adam')
#early_stop = EarlyStopping(monitor = 'val_loss', patience = 5)
#filename = os.path.join(model_path, '/content/drive/MyDrive/Colab Notebooks/tmp_checkpoint.h5')
#checkpoint = ModelCheckpoint(filename, monitor='val_loss', verbose = 1,

#history = model.fit(x_train, y_train,
                    #epochs = 10,
                    #batch_size = 16,
                    #validation_data=(x_valid, y_valid))
                    #callbacks = [early_stop, checkpoint]))

model.fit(x_train, y_train, 
          validation_data = (x_valid, y_valid), 
          batch_size = 10, 
          epochs = 10)

pred = model.predict(x_test)

fig = plt.figure(facecolor = 'white')
ax = fig.add_subplot(111)
ax.plot(y_test, label = 'True')
ax.plot(pred, label = 'Prediction')
ax.legend()
plt.show()